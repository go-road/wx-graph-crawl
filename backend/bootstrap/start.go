package bootstrap

import (
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/pkg/errors"
	"github.com/pudongping/wx-graph-crawl/backend/utils"
)

func PrintLogo() {
	logoContent := []byte{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 95, 95, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 95, 95, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 32, 95, 95, 95, 95, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 32, 95, 95, 95, 95, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 32, 124, 10, 32, 95, 95, 32, 32, 32, 32, 32, 32, 95, 95, 95, 95, 32, 32, 95, 95, 95, 95, 95, 95, 95, 95, 124, 32, 124, 32, 32, 95, 95, 32, 95, 32, 95, 95, 32, 95, 95, 32, 95, 32, 95, 32, 95, 95, 32, 124, 32, 124, 95, 95, 32, 95, 95, 95, 95, 95, 95, 124, 32, 124, 32, 32, 32, 32, 32, 95, 32, 95, 95, 32, 95, 95, 32, 95, 95, 95, 32, 32, 32, 32, 32, 32, 95, 124, 32, 124, 32, 95, 95, 95, 32, 95, 32, 95, 95, 10, 32, 92, 32, 92, 32, 47, 92, 32, 47, 32, 47, 92, 32, 92, 47, 32, 47, 95, 95, 95, 95, 95, 95, 124, 32, 124, 32, 124, 95, 32, 124, 32, 39, 95, 95, 47, 32, 95, 96, 32, 124, 32, 39, 95, 32, 92, 124, 32, 39, 95, 32, 92, 95, 95, 95, 95, 95, 95, 124, 32, 124, 32, 32, 32, 32, 124, 32, 39, 95, 95, 47, 32, 95, 96, 32, 92, 32, 92, 32, 47, 92, 32, 47, 32, 47, 32, 124, 47, 32, 95, 32, 92, 32, 39, 95, 95, 124, 10, 32, 32, 92, 32, 86, 32, 32, 86, 32, 47, 32, 32, 62, 32, 32, 60, 32, 32, 32, 32, 32, 32, 32, 124, 32, 124, 95, 95, 124, 32, 124, 32, 124, 32, 124, 32, 40, 95, 124, 32, 124, 32, 124, 95, 41, 32, 124, 32, 124, 32, 124, 32, 124, 32, 32, 32, 32, 32, 124, 32, 124, 95, 95, 95, 95, 124, 32, 124, 32, 124, 32, 40, 95, 124, 32, 124, 92, 32, 86, 32, 32, 86, 32, 47, 124, 32, 124, 32, 32, 95, 95, 47, 32, 124, 10, 32, 32, 32, 92, 95, 47, 92, 95, 47, 32, 32, 47, 95, 47, 92, 95, 92, 32, 32, 32, 32, 32, 32, 32, 92, 95, 95, 95, 95, 95, 124, 95, 124, 32, 32, 92, 95, 95, 44, 95, 124, 32, 46, 95, 95, 47, 124, 95, 124, 32, 124, 95, 124, 32, 32, 32, 32, 32, 32, 92, 95, 95, 95, 95, 95, 124, 95, 124, 32, 32, 92, 95, 95, 44, 95, 124, 32, 92, 95, 47, 92, 95, 47, 32, 124, 95, 124, 92, 95, 95, 95, 124, 95, 124, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 32, 124, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 95, 124}
	utils.ConsoleCyan(string(logoContent))
}

// RootPath 获取项目根目录
func RootPath() (string, error) {
	var (
		exePath, rootPathByExecutable, rootPathByCaller, tmpDir string
		err                                                     error
	)
	// 第一种方式：获取当前执行程序所在的绝对路径
	// 这种仅在 `go build` 时，才可以获取正确的路径
	// 获取当前执行的二进制文件的全路径，包括二进制文件名
	exePath, err = os.Executable()
	if err != nil {
		return "", errors.Wrap(err, "获取当前执行文件路径失败 Executable")
	}
	rootPathByExecutable, err = filepath.EvalSymlinks(filepath.Dir(exePath))
	if err != nil {
		return "", errors.Wrap(err, "获取当前执行文件路径失败 EvalSymlinks")
	}

	// 第二种方式：获取当前执行文件绝对路径
	// 这种方式在 `go run` 和 `go build` 时，都可以获取到正确的路径
	// 但是交叉编译后，执行的结果是错误的结果
	_, filename, _, ok := runtime.Caller(0)
	if ok {
		rootPathByCaller = path.Dir(filename)
	}

	// 可以通过 `echo $TMPDIR` 查看当前系统临时目录
	tmpDir, err = filepath.EvalSymlinks(os.TempDir())
	if err != nil {
		return "", errors.Wrap(err, "获取当前系统临时目录失败")
	}

	// 对比通过 `os.Executable()` 获取到的路径是否与 `TMPDIR` 环境变量设置的路径相同
	// 相同，则说明是通过 `go run` 命令启动的
	// 不同，则是通过 `go build` 命令启动的
	if strings.Contains(rootPathByExecutable, tmpDir) {
		return rootPathByCaller, nil
	}

	return rootPathByExecutable, nil
}
